{"version":3,"sources":["components/recipe/recipe.module.css","components/layout/spinner.gif","services/context.js","components/layout/Spinner.js","components/recipe/Recipe.js","components/recipe/Recipes.js","components/layout/Search.js","components/layout/Index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Context","React","createContext","reducer","state","action","type","hits","payload","Provider","dispatch","setState","axios","get","process","then","res","data","catch","err","console","log","value","this","props","children","Component","Consumer","src","spinner","alt","style","width","margin","display","Recipe","recipe","undefined","length","Spinner","className","image","label","list","ingredients","map","ingredient","text","calories","Recipes","Fragment","hit","key","Search","recipeName","findRecipe","e","preventDefault","onChange","target","name","onSubmit","bind","Index","App","basename","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sGACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,sBAAsB,KAAO,qBAAqB,KAAO,qBAAqB,IAAM,sB,mBCD9ID,EAAOC,QAAU,IAA0B,qC,2cCG3C,IAAMC,EAAUC,IAAMC,gBAEhBC,EAAU,SAACC,EAAOC,GACtB,OAAQA,EAAOC,MACb,IAAK,iBACH,O,qVAAO,CAAP,GACKF,EADL,CAEEG,KAAMF,EAAOG,UAEjB,QACE,OAAOJ,IAIAK,EAAb,2MACEL,MAAQ,CACNG,KAAM,GACNG,SAAU,SAAAL,GAAM,OAAI,EAAKM,SAAS,SAAAP,GAAK,OAAID,EAAQC,EAAOC,OAH9D,mFAMuB,IAAD,OAClBO,IACGC,IADH,6FAGMC,WAHN,oBAIgBA,qCAEbC,KAAK,SAAAC,GACJ,EAAKL,SAAS,CAAEJ,KAAMS,EAAIC,KAAKV,SAEhCW,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,OAhBhC,+BAoBI,OACE,kBAACnB,EAAQS,SAAT,CAAkBa,MAAOC,KAAKnB,OAC3BmB,KAAKC,MAAMC,cAtBpB,GAA8BC,aA4BjBC,EAAW3B,EAAQ2B,S,yBC1CjB,aACd,OAAS,6BAER,yBACIC,IACHC,IAEDC,IAAM,aACNC,MACC,CACCC,MAAO,OACPC,OAAQ,aACRC,QAAS,WAXH,M,iBCqBKC,EArBA,SAAAX,GAAU,IACfY,EAAWZ,EAAXY,OAER,YAAeC,IAAXD,GAA0C,IAAlBA,EAAOE,OAC1B,kBAACC,EAAD,MAGL,yBAAKC,UAAWT,IAAMK,QACpB,yBAAKR,IAAKQ,EAAOK,MAAOX,IAAI,GAAGU,UAAWT,IAAMU,QAChD,4BAAKL,EAAOM,OACZ,wBAAIF,UAAWT,IAAMY,MAClBP,EAAOQ,YAAYC,IAAI,SAAAC,GAAU,OAChC,4BAAKA,EAAWC,SAGpB,2BAAIX,EAAOY,YCWJC,EAxBC,WACd,OACE,kBAACtB,EAAD,KACG,SAAAL,GAAU,IACDf,EAASe,EAATf,KAER,YAAa8B,IAAT9B,GAAsC,IAAhBA,EAAK+B,OACtB,kBAACC,EAAD,MAGL,kBAAC,IAAMW,SAAP,KACE,yBAAKV,UAAU,WACZjC,EAAKsC,IAAI,SAAAM,GAAG,OACX,kBAAC,EAAD,CAAQC,IAAKD,EAAIf,OAAOM,MAAON,OAAQe,EAAIf,gBC4C9CiB,E,2MA1DbjD,MAAQ,CACNkD,WAAY,I,EAGdC,WAAa,SAAC7C,EAAU8C,GACtBA,EAAEC,iBAEF7C,IACGC,IADH,8EAGM,EAAKT,MAAMkD,WAHjB,mBAIexC,WAJf,oBAKMA,qCAGHC,KAAK,SAAAC,GACJN,EAAS,CACPJ,KAAM,iBACNE,QAASQ,EAAIC,KAAKV,OAGpB,EAAKI,SAAS,CAAE2C,WAAY,OAE7BpC,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,M,EAG9BuC,SAAW,SAAAF,GACT,EAAK7C,SAAL,eAAiB6C,EAAEG,OAAOC,KAAOJ,EAAEG,OAAOrC,S,wEAGlC,IAAD,OACP,OACE,kBAACK,EAAD,KACG,SAAAL,GAAU,IACDZ,EAAaY,EAAbZ,SACR,OACE,0BACE8B,UAAU,cACVqB,SAAU,EAAKN,WAAWO,KAAK,EAAMpD,IAErC,2BACEJ,KAAK,OACLkC,UAAU,aACVoB,KAAK,aACLtC,MAAO,EAAKlB,MAAMkD,WAClBI,SAAU,EAAKA,WAEjB,4BAAQpD,KAAK,SAASkC,UAAU,iBAAhC,iB,GAhDOd,aCSNqC,EATD,WACZ,OACE,kBAAC,IAAMb,SAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCsBSc,E,iLAjBX,OADA5C,QAAQC,IAAI,kBAEV,kBAAC,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAM6B,SAAP,KACE,yBAAKV,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAeyB,SAAS,cACxB,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWL,a,GAV/BrC,aCEE2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjE,KAAK,SAAAkE,GACjCA,EAAaC,iB","file":"static/js/main.34d7031b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__3hG3p\",\"image\":\"recipe_image__2r0Ra\",\"list\":\"recipe_list__F5J7o\",\"text\":\"recipe_text__2_ac2\",\"row\":\"recipe_row__2vsBs\"};","module.exports = __webpack_public_path__ + \"static/media/spinner.b58b713b.gif\";","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst Context = React.createContext();\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'SEARCH_RECIPES':\r\n      return {\r\n        ...state,\r\n        hits: action.payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport class Provider extends Component {\r\n  state = {\r\n    hits: [],\r\n    dispatch: action => this.setState(state => reducer(state, action))\r\n  };\r\n\r\n  componentDidMount() {\r\n    axios\r\n      .get(\r\n        `https://cors-anywhere.herokuapp.com/https://api.edamam.com/search?q=chicken&app_id=${\r\n          process.env.REACT_APP_APP_ID\r\n        }&app_key=${process.env.REACT_APP_API_KEY}`\r\n      )\r\n      .then(res => {\r\n        this.setState({ hits: res.data.hits });\r\n      })\r\n      .catch(err => console.log(err));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Context.Provider value={this.state}>\r\n        {this.props.children}\r\n      </Context.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport const Consumer = Context.Consumer;\r\n","import React from 'react';\r\nimport spinner from './spinner.gif';\r\n\r\nexport default () => {\r\n\treturn ( <\r\n\t\tdiv >\r\n\t\t<\r\n\t\timg src = {\r\n\t\t\tspinner\r\n\t\t}\r\n\t\talt = \"Loading...\"\r\n\t\tstyle = {\r\n\t\t\t{\r\n\t\t\t\twidth: '70px',\r\n\t\t\t\tmargin: ' 40px auto',\r\n\t\t\t\tdisplay: 'block'\r\n\t\t\t}\r\n\t\t}\r\n\t\t/> < /\r\n\t\tdiv >\r\n\t);\r\n};","import React from 'react';\r\nimport style from './recipe.module.css';\r\nimport Spinner from '../layout/Spinner';\r\n\r\nconst Recipe = props => {\r\n  const { recipe } = props;\r\n\r\n  if (recipe === undefined || recipe.length === 0) {\r\n    return <Spinner />;\r\n  } else {\r\n    return (\r\n      <div className={style.recipe}>\r\n        <img src={recipe.image} alt=\"\" className={style.image} />\r\n        <h3>{recipe.label}</h3>\r\n        <ol className={style.list}>\r\n          {recipe.ingredients.map(ingredient => (\r\n            <li>{ingredient.text}</li>\r\n          ))}\r\n        </ol>\r\n        <p>{recipe.calories}</p>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Recipe;\r\n","import React from 'react';\r\nimport { Consumer } from '../../services/context';\r\nimport Spinner from '../layout/Spinner';\r\nimport Recipe from './Recipe';\r\nimport style from './recipe.module.css';\r\n\r\nconst Recipes = () => {\r\n  return (\r\n    <Consumer>\r\n      {value => {\r\n        const { hits } = value;\r\n\r\n        if (hits === undefined || hits.length === 0) {\r\n          return <Spinner />;\r\n        } else {\r\n          return (\r\n            <React.Fragment>\r\n              <div className=\"recipes\">\r\n                {hits.map(hit => (\r\n                  <Recipe key={hit.recipe.label} recipe={hit.recipe} />\r\n                ))}\r\n              </div>\r\n            </React.Fragment>\r\n          );\r\n        }\r\n      }}\r\n    </Consumer>\r\n  );\r\n};\r\n\r\nexport default Recipes;\r\n","import React, { Component } from 'react';\r\nimport { Consumer } from '../../services/context';\r\nimport axios from 'axios';\r\n\r\nclass Search extends Component {\r\n  state = {\r\n    recipeName: ''\r\n  };\r\n\r\n  findRecipe = (dispatch, e) => {\r\n    e.preventDefault();\r\n\r\n    axios\r\n      .get(\r\n        `https://cors-anywhere.herokuapp.com/https://api.edamam.com/search?q=${\r\n          this.state.recipeName\r\n        }&app_id=${process.env.REACT_APP_APP_ID}&app_key=${\r\n          process.env.REACT_APP_API_KEY\r\n        }`\r\n      )\r\n      .then(res => {\r\n        dispatch({\r\n          type: 'SEARCH_RECIPES',\r\n          payload: res.data.hits\r\n        });\r\n\r\n        this.setState({ recipeName: '' });\r\n      })\r\n      .catch(err => console.log(err));\r\n  };\r\n\r\n  onChange = e => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Consumer>\r\n        {value => {\r\n          const { dispatch } = value;\r\n          return (\r\n            <form\r\n              className=\"search-form\"\r\n              onSubmit={this.findRecipe.bind(this, dispatch)}\r\n            >\r\n              <input\r\n                type=\"text\"\r\n                className=\"search-bar\"\r\n                name=\"recipeName\"\r\n                value={this.state.recipeName}\r\n                onChange={this.onChange}\r\n              />\r\n              <button type=\"submit\" className=\"search-button\">\r\n                Submit\r\n              </button>\r\n            </form>\r\n          );\r\n        }}\r\n      </Consumer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Search;\r\n","import React from 'react';\r\nimport Recipes from '../recipe/Recipes';\r\nimport Search from './Search';\r\n\r\nconst Index = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <Search />\r\n      <Recipes />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Index;\r\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport { Provider } from './services/context';\n\nimport './App.css';\n\nimport Index from './components/layout/Index';\nimport { BrowserRouter } from 'react-router-dom';\n\nclass App extends Component {\n  render() {\n    console.log('Production App');\n    return (\n      <Provider>\n        <Router>\n          <React.Fragment>\n            <div className=\"App\">\n              <Switch>\n                <BrowserRouter basename=\"/ReactApp\" />\n                <Route exact path=\"/\" component={Index} />\n              </Switch>\n            </div>\n          </React.Fragment>\n        </Router>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}